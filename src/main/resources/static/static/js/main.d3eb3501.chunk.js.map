{"version":3,"sources":["serviceclient.js","components/Tehtava.js","components/TehtavaList.js","components/TehtavaForm.js","components/TehtavaBox.js","App.js","serviceWorker.js","index.js"],"names":["apiUrl","Tehtava","poista","_this","props","tehtava","id","react_default","a","createElement","className","this","teksti","type","onClick","Component","TehtavaList","self","kaikki","tehtavat","sort","s1","s2","map","src_components_Tehtava","poisto","key","TehtavaForm","state","textChange","e","setState","target","value","laheta","preventDefault","lisaaTehtava","onSubmit","onChange","TehtavaBox","haeTehtavatjaPaivita","axios","get","then","res","data","poistaTehtava","delete","uusiTehtava","post","src_components_TehtavaList","src_components_TehtavaForm","App","src_components_TehtavaBox","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d3eb3501.chunk.js","sourcesContent":["import axios from 'axios';\r\nconst apiUrl = \"http://localhost:8080/api/todot\"\r\n\r\nexport function haeTehtavat(){\r\n    return axios.get(apiUrl);\r\n}\r\nexport function uusiTehtava(tehtava) {\r\n    return axios.post(apiUrl, tehtava);\r\n}\r\nexport function poistaTehtava(id){\r\n    return axios.delete(apiUrl + \"/\" + id);\r\n}\r\n// export function muokkaaTehtavaa(id, tehtava) {\r\n//     return axios.put(apiUrl + \"/\" + id, tehtava);\r\n// }","import React, {Component} from 'react';\r\nimport './Tehtava.css';\r\n\r\nclass Tehtava extends Component {\r\n    poista = () => {\r\n        this.props.poista(this.props.tehtava.id);\r\n    };\r\n    render() {\r\n        return (\r\n            <li>\r\n                <div className=\"tehtava\">\r\n                    <p className=\"teksti\">{this.props.tehtava.teksti}</p>\r\n                    <p>\r\n                        <button className=\"button\" type=\"button\" onClick={this.poista}>Poista</button>\r\n                    </p>\r\n                </div>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tehtava;","import React, {Component} from 'react';\r\nimport Tehtava from \"./Tehtava\";\r\nimport './TehtavaList.css';\r\n\r\nclass TehtavaList extends Component {\r\n    render() {\r\n        var self = this;\r\n\r\n        var kaikki = this.props.tehtavat\r\n        .sort(function (s1, s2) {\r\n            return s2.id - s1.id;\r\n        })\r\n            .map(function(tehtava) {\r\n                return (<Tehtava tehtava={tehtava} poista={self.props.poisto} key={tehtava.id}/>);\r\n            });\r\n        return(\r\n            <div>\r\n                <ul className=\"tehtavalist\">\r\n                    {kaikki}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TehtavaList;","import React, {Component} from 'react';\r\nimport './TehtavaForm.css';\r\n\r\nclass TehtavaForm extends Component {\r\n    state = {teksti: ''};\r\n    textChange = (e) => {\r\n        this.setState({teksti: e.target.value});\r\n    };\r\n    laheta = (e) => {\r\n        e.preventDefault();\r\n        this.props.lisaaTehtava(this.state);\r\n        this.setState({teksti: ''});\r\n    };\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form className=\"tehtavaform\" onSubmit={this.laheta}>\r\n                    <table>\r\n                        <tbody>\r\n                        <tr><td>Kirjoita tähän uusi tehtävä:</td><td><input className=\"tekstiruutu\" value={this.state.teksti} onChange={this.textChange}/></td>\r\n                            <td></td><td><input className=\"lisaabutton\" type=\"submit\" value=\"Lisää\"/></td></tr>\r\n                        </tbody>\r\n                    </table>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TehtavaForm;","import React, {Component} from 'react';\r\nimport { haeTehtavat,uusiTehtava,poistaTehtava } from '../serviceclient.js';\r\nimport TehtavaList from \"./TehtavaList\";\r\nimport TehtavaForm from \"./TehtavaForm\";\r\nimport './TehtavaBox.css';\r\n\r\nclass TehtavaBox extends Component {\r\n    state = {\r\n        tehtavat: []\r\n    };\r\n    componentDidMount() {\r\n        this.haeTehtavatjaPaivita();\r\n    }\r\n\r\n    haeTehtavatjaPaivita = () => {\r\n        haeTehtavat().then(res => {\r\n            this.setState({tehtavat: res.data})\r\n        });\r\n    };\r\n    poistaTehtava = (id)=> {\r\n        poistaTehtava(id).then((res) => {\r\n            this.haeTehtavatjaPaivita();\r\n        });\r\n    };\r\n    uusiTehtava = (tehtava) => {\r\n        uusiTehtava(tehtava).then((res) => {\r\n            this.haeTehtavatjaPaivita();\r\n        });\r\n    };\r\n    // muokkaaTehtavaa = (id, tehtava) => {\r\n    //     muokkaaTehtavaa(id, tehtava).then((res) => {\r\n    //         this.haeTehtavatjaPaivita();\r\n    //     });\r\n    // };\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 className=\"pääotsikko\">ToDo-lista</h1>\r\n                <TehtavaList tehtavat={this.state.tehtavat} poisto={this.poistaTehtava}/>\r\n                <TehtavaForm lisaaTehtava={this.uusiTehtava}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TehtavaBox;","import React from 'react';\nimport './App.css';\nimport TehtavaBox from \"./components/TehtavaBox\";\n\nfunction App() {\n  return (\n      <div className=\"App\">\n        <TehtavaBox/>\n      </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}